'use strict';

var _component = require('./../common/component.js');

var _touch = require('./../mixins/touch.js');

(0, _component.VantComponent)({
  mixins: [_touch.touch],
  props: {
    disabled: Boolean,
    useButtonSlot: Boolean,
    activeColor: String,
    inactiveColor: String,
    max: {
      type: Number,
      value: 100
    },
    min: {
      type: Number,
      value: 0
    },
    step: {
      type: Number,
      value: 1
    },
    value: {
      type: Number,
      value: 0
    },
    barHeight: {
      type: String,
      value: '2px'
    }
  },
  watch: {
    value: function value(_value) {
      this.updateValue(_value, false);
    }
  },
  created: function created() {
    this.updateValue(this.data.value);
  },
  methods: {
    onTouchStart: function onTouchStart(event) {
      if (this.data.disabled) return;
      this.touchStart(event);
      this.startValue = this.format(this.data.value);
    },
    onTouchMove: function onTouchMove(event) {
      var _this = this;

      if (this.data.disabled) return;
      this.touchMove(event);
      this.getRect('.van-slider').then(function (rect) {
        var diff = _this.deltaX / rect.width * 100;

        _this.updateValue(_this.startValue + diff, false, true);
      });
    },
    onTouchEnd: function onTouchEnd() {
      if (this.data.disabled) return;
      this.updateValue(this.data.value, true);
    },
    onClick: function onClick(event) {
      var _this2 = this;

      if (this.data.disabled) return;
      this.getRect(function (rect) {
        var value = (event.detail.x - rect.left) / rect.width * 100;

        _this2.updateValue(value, true);
      });
    },
    updateValue: function updateValue(value, end, drag) {
      value = this.format(value);
      this.set({
        value: value,
        barStyle: "width: " + value + "%; height: " + this.data.barHeight + ";"
      });

      if (drag) {
        this.$emit('drag', {
          value: value
        });
      }

      if (end) {
        this.$emit('change', value);
      }
    },
    format: function format(value) {
      var _this$data = this.data,
          max = _this$data.max,
          min = _this$data.min,
          step = _this$data.step;
      return Math.round(Math.max(min, Math.min(value, max)) / step) * step;
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1peGlucyIsInRvdWNoIiwicHJvcHMiLCJkaXNhYmxlZCIsIkJvb2xlYW4iLCJ1c2VCdXR0b25TbG90IiwiYWN0aXZlQ29sb3IiLCJTdHJpbmciLCJpbmFjdGl2ZUNvbG9yIiwibWF4IiwidHlwZSIsIk51bWJlciIsInZhbHVlIiwibWluIiwic3RlcCIsImJhckhlaWdodCIsIndhdGNoIiwiX3ZhbHVlIiwidXBkYXRlVmFsdWUiLCJjcmVhdGVkIiwiZGF0YSIsIm1ldGhvZHMiLCJvblRvdWNoU3RhcnQiLCJldmVudCIsInRvdWNoU3RhcnQiLCJzdGFydFZhbHVlIiwiZm9ybWF0Iiwib25Ub3VjaE1vdmUiLCJfdGhpcyIsInRvdWNoTW92ZSIsImdldFJlY3QiLCJ0aGVuIiwicmVjdCIsImRpZmYiLCJkZWx0YVgiLCJ3aWR0aCIsIm9uVG91Y2hFbmQiLCJvbkNsaWNrIiwiX3RoaXMyIiwiZGV0YWlsIiwieCIsImxlZnQiLCJlbmQiLCJkcmFnIiwic2V0IiwiYmFyU3R5bGUiLCIkZW1pdCIsIl90aGlzJGRhdGEiLCJNYXRoIiwicm91bmQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0EsOEJBQWM7QUFDWkEsVUFBUSxDQUFDQyxZQUFELENBREk7QUFFWkMsU0FBTztBQUNMQyxjQUFVQyxPQURMO0FBRUxDLG1CQUFlRCxPQUZWO0FBR0xFLGlCQUFhQyxNQUhSO0FBSUxDLG1CQUFlRCxNQUpWO0FBS0xFLFNBQUs7QUFDSEMsWUFBTUMsTUFESDtBQUVIQyxhQUFPO0FBRkosS0FMQTtBQVNMQyxTQUFLO0FBQ0hILFlBQU1DLE1BREg7QUFFSEMsYUFBTztBQUZKLEtBVEE7QUFhTEUsVUFBTTtBQUNKSixZQUFNQyxNQURGO0FBRUpDLGFBQU87QUFGSCxLQWJEO0FBaUJMQSxXQUFPO0FBQ0xGLFlBQU1DLE1BREQ7QUFFTEMsYUFBTztBQUZGLEtBakJGO0FBcUJMRyxlQUFXO0FBQ1RMLFlBQU1ILE1BREc7QUFFVEssYUFB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QVdELEtBQUt2QyxHQUFMLENBQVNJLEdBQVQsRUFBY21DLEtBQUtuQyxHQUFMLENBQVNELEtBQVQsRUFBZ0JILEdBQWhCLENBQWQsSUFBc0NLLElBQWpELElBQXlEQSxJQUFoRTtBQUNEO0FBdERNO0FBcENHLENBQWQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYW50Q29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyB0b3VjaCB9IGZyb20gJy4uL21peGlucy90b3VjaCc7XG5WYW50Q29tcG9uZW50KHtcbiAgbWl4aW5zOiBbdG91Y2hdLFxuICBwcm9wczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIHVzZUJ1dHRvblNsb3Q6IEJvb2xlYW4sXG4gICAgYWN0aXZlQ29sb3I6IFN0cmluZyxcbiAgICBpbmFjdGl2ZUNvbG9yOiBTdHJpbmcsXG4gICAgbWF4OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICB2YWx1ZTogMTAwXG4gICAgfSxcbiAgICBtaW46IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHZhbHVlOiAwXG4gICAgfSxcbiAgICBzdGVwOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICB2YWx1ZTogMVxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHZhbHVlOiAwXG4gICAgfSxcbiAgICBiYXJIZWlnaHQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbHVlOiAnMnB4J1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKF92YWx1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICB0aGlzLnVwZGF0ZVZhbHVlKHRoaXMuZGF0YS52YWx1ZSk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgdGhpcy50b3VjaFN0YXJ0KGV2ZW50KTtcbiAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHRoaXMuZm9ybWF0KHRoaXMuZGF0YS52YWx1ZSk7XG4gICAgfSxcbiAgICBvblRvdWNoTW92ZTogZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIHRoaXMudG91Y2hNb3ZlKGV2ZW50KTtcbiAgICAgIHRoaXMuZ2V0UmVjdCgnLnZhbi1zbGlkZXInKS50aGVuKGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgIHZhciBkaWZmID0gX3RoaXMuZGVsdGFYIC8gcmVjdC53aWR0aCAqIDEwMDtcblxuICAgICAgICBfdGhpcy51cGRhdGVWYWx1ZShfdGhpcy5zdGFydFZhbHVlICsgZGlmZiwgZmFsc2UsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgdGhpcy51cGRhdGVWYWx1ZSh0aGlzLmRhdGEudmFsdWUsIHRydWUpO1xuICAgIH0sXG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIHRoaXMuZ2V0UmVjdChmdW5jdGlvbiAocmVjdCkge1xuICAgICAgICB2YXIgdmFsdWUgPSAoZXZlbnQuZGV0YWlsLnggLSByZWN0LmxlZnQpIC8gcmVjdC53aWR0aCAqIDEwMDtcblxuICAgICAgICBfdGhpczIudXBkYXRlVmFsdWUodmFsdWUsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGVWYWx1ZTogZnVuY3Rpb24gdXBkYXRlVmFsdWUodmFsdWUsIGVuZCwgZHJhZykge1xuICAgICAgdmFsdWUgPSB0aGlzLmZvcm1hdCh2YWx1ZSk7XG4gICAgICB0aGlzLnNldCh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgYmFyU3R5bGU6IFwid2lkdGg6IFwiICsgdmFsdWUgKyBcIiU7IGhlaWdodDogXCIgKyB0aGlzLmRhdGEuYmFySGVpZ2h0ICsgXCI7XCJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZHJhZykge1xuICAgICAgICB0aGlzLiRlbWl0KCdkcmFnJywge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzJGRhdGEgPSB0aGlzLmRhdGEsXG4gICAgICAgICAgbWF4ID0gX3RoaXMkZGF0YS5tYXgsXG4gICAgICAgICAgbWluID0gX3RoaXMkZGF0YS5taW4sXG4gICAgICAgICAgc3RlcCA9IF90aGlzJGRhdGEuc3RlcDtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsdWUsIG1heCkpIC8gc3RlcCkgKiBzdGVwO1xuICAgIH1cbiAgfVxufSk7Il19